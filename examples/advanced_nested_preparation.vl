// Advanced Nested Reference Preparation Patterns
// Demonstrates complex nested data structures with cross-scope reference validity

data class Address(val street: String, val city: String, val postal_code: String)
data class Contact(val email: String, val phone: String, val address: Address)
data class Person(val name: String, val age: I64, val contact: Contact)
data class Organization(val name: String, val primary_contact: Person, val secondary_contact: Person)
data class Project(val title: String, val organization: Organization, val description: String)

data class ProcessingMetadata(val processed_by: String, val timestamp: I64, val notes: String)
data class ProcessedProject(val original: Project, val processed_title: String, val metadata: ProcessingMetadata)

// ========= DEEP NESTED CONSTRUCTION WITH REFERENCE PREPARATION =========

fun createAddress(street: Own<String>, city: Own<String>, postal: Own<String>): Address {
    // Prepare address with all string references valid for caller scope
    return Address(street = street.bumpRef(), city = city.bumpRef(), postal_code = postal.bumpRef()).bumpRef()
}

fun createContact(email: Own<String>, phone: Own<String>, street: Own<String>, city: Own<String>, postal: Own<String>): Contact {
    // Prepare contact with nested address references valid for caller scope
    val address = createAddress(street, city, postal)
    return Contact(email = email.bumpRef(), phone = phone.bumpRef(), address = address).bumpRef()
}

fun createPerson(name: Own<String>, age: I64, email: Own<String>, phone: Own<String>, street: Own<String>, city: Own<String>, postal: Own<String>): Person {
    // Prepare person with deeply nested references valid for caller scope
    val contact = createContact(email, phone, street, city, postal)
    return Person(name = name.bumpRef(), age = age, contact = contact).bumpRef()
}

fun createOrganization(org_name: Own<String>, primary_name: Own<String>, primary_age: I64, secondary_name: Own<String>, secondary_age: I64): Organization {
    // Prepare organization with complex nested person structures
    
    // Create contacts with prepared references using separate emails
    val primary_email = "primary@company.com".toString()
    val secondary_email = "secondary@company.com".toString()
    
    val primary_contact = createPerson(primary_name, primary_age, primary_email, "555-0001".toString(), "123 Main St".toString(), "Business City".toString(), "12345".toString())
    val secondary_contact = createPerson(secondary_name, secondary_age, secondary_email, "555-0002".toString(), "456 Oak Ave".toString(), "Business City".toString(), "12346".toString())
    
    return Organization(name = org_name.bumpRef(), primary_contact = primary_contact, secondary_contact = secondary_contact).bumpRef()
}

fun createProject(title: Own<String>, org_name: Own<String>, description: Own<String>): Project {
    // Prepare project with fully nested organization structure
    
    val organization = createOrganization(org_name, "John Smith".toString(), 45, "Jane Doe".toString(), 38)
    
    return Project(title = title.bumpRef(), organization = organization, description = description.bumpRef()).bumpRef()
}

// ========= TRANSFORMATION AND PROCESSING WITH NESTED REFERENCE PREPARATION =========

fun transformProjectTitle(project: Project, transform_prefix: Own<String>): String {
    // Transform title preparing enhanced version for caller - simplified
    return transform_prefix.bumpRef()
}

fun createProcessingMetadata(processor_name: Own<String>, time: I64, project_title: String): ProcessingMetadata {
    // Create metadata preparing processing information for caller
    val notes = "Processing notes here".toString()
    return ProcessingMetadata(processed_by = processor_name.bumpRef(), timestamp = time, notes = notes.bumpRef()).bumpRef()
}

fun processProject(project: Project, processor_name: Own<String>, timestamp: I64): ProcessedProject {
    // Process project preparing comprehensive result with nested references
    val processed_title = transformProjectTitle(project, "ENHANCED".toString())
    val metadata = createProcessingMetadata(processor_name, timestamp, processed_title)
    
    return ProcessedProject(original = project, processed_title = processed_title, metadata = metadata).bumpRef()
}

// ========= ANALYSIS AND EXTRACTION WITH REFERENCE PREPARATION =========

fun extractOrganizationInfo(project: Project): String {
    // Extract organization information preparing summary for caller
    val org = project.organization
    val summary = "Organization information extracted".toString()
    return summary.bumpRef()
}

fun extractContactDetails(project: Project): String {
    // Extract contact details preparing comprehensive information for caller
    val details = "Contact details extracted".toString()
    return details.bumpRef()
}

fun analyzeProjectComplexity(project: Project): String {
    // Analyze project complexity preparing analysis for caller
    val analysis = "Project complexity analysis completed".toString()
    return analysis.bumpRef()
}

// ========= BATCH PROCESSING WITH REFERENCE PREPARATION =========

fun createProjectBatch(base_title: Own<String>, org_base: Own<String>, count: I64): Project {
    // Create batch project preparing all references for caller
    val batch_title = "Batch Project Title".toString()
    val batch_org = "Batch Organization".toString()
    val batch_description = "Batch project description".toString()
    
    return createProject(batch_title, batch_org, batch_description)
}

fun processBatchProject(base_title: Own<String>, org_base: Own<String>, count: I64, processor: Own<String>): ProcessedProject {
    // Process batch project preparing complete results for caller
    val project = createProjectBatch(base_title, org_base, count)
    val batch_processor = "Batch Processor".toString()
    val processed = processProject(project, batch_processor, count * 1000)
    
    return processed
}

// ========= COMPREHENSIVE PROCESSING PIPELINE =========

fun processProjectComprehensively(project_title: Own<String>, org_name: Own<String>, processor_name: Own<String>): ProcessedProject {
    // Comprehensive processing preparing complete analysis for caller
    val description = "Comprehensive project description".toString()
    val project = createProject(project_title, org_name, description)
    
    // Process project with enhanced metadata
    val enhanced_processor = "Enhanced Processor".toString()
    val processed = processProject(project, enhanced_processor, 5000)
    
    return processed
}

fun createProjectAnalysisReport(processed_project: ProcessedProject): String {
    // Create comprehensive analysis report preparing detailed information for caller
    val original = processed_project.original
    val org_info = extractOrganizationInfo(original)
    val contact_info = extractContactDetails(original)
    val complexity = analyzeProjectComplexity(original)
    
    val report = "PROJECT ANALYSIS REPORT - Comprehensive analysis completed".toString()
    
    return report.bumpRef()
}

fun main() {
    // ========= BASIC NESTED CONSTRUCTION =========
    val simple_project = createProject("Simple Project".toString(), "Basic Corp".toString(), "A simple project description".toString())
    
    // ========= COMPREHENSIVE PROCESSING =========
    val comprehensive_processed = processProjectComprehensively("Complex Project".toString(), "Advanced Corp".toString(), "SuperProcessor".toString())
    
    // ========= BATCH PROCESSING =========
    val batch_processed_1 = processBatchProject("Batch Project".toString(), "Batch".toString(), 1, "BatchProcessor".toString())
    val batch_processed_2 = processBatchProject("Batch Project".toString(), "Batch".toString(), 2, "BatchProcessor".toString())
    val batch_processed_3 = processBatchProject("Batch Project".toString(), "Batch".toString(), 3, "BatchProcessor".toString())
    
    // ========= ANALYSIS AND EXTRACTION =========
    val org_info = extractOrganizationInfo(simple_project)
    val contact_details = extractContactDetails(comprehensive_processed.original)
    val complexity = analyzeProjectComplexity(batch_processed_1.original)
    
    // ========= COMPREHENSIVE REPORTING =========
    val analysis_report = createProjectAnalysisReport(comprehensive_processed)
    
    // All nested references are prepared and valid for use here
    println("Simple project title: {}", simple_project.title)
    println("Simple project org: {}", simple_project.organization.name)
    println("Simple project primary contact: {}", simple_project.organization.primary_contact.name)
    println("Simple project primary email: {}", simple_project.organization.primary_contact.contact.email)
    println("Simple project primary address: {}", simple_project.organization.primary_contact.contact.address.street)
    
    println("Comprehensive processed title: {}", comprehensive_processed.processed_title)
    println("Comprehensive processor: {}", comprehensive_processed.metadata.processed_by)
    
    println("Batch 1 title: {}", batch_processed_1.processed_title)
    println("Batch 2 title: {}", batch_processed_2.processed_title)  
    println("Batch 3 title: {}", batch_processed_3.processed_title)
    
    println("Organization info: {}", org_info)
    println("Contact details: {}", contact_details)
    println("Complexity analysis: {}", complexity)
    
    println("Full analysis report: {}", analysis_report)
    
    // Demonstrate deep nested access to prepared references
    println("Deep access - Secondary contact phone: {}", simple_project.organization.secondary_contact.contact.phone)
    println("Deep access - Secondary contact city: {}", comprehensive_processed.original.organization.secondary_contact.contact.address.city)
    println("Deep access - Batch 2 postal code: {}", batch_processed_2.original.organization.primary_contact.contact.address.postal_code)
}

// ADVANCED NESTED REFERENCE PREPARATION:
//
// This demonstrates sophisticated nested patterns where reference preparation enables:
//
// 1. DEEP NESTED CONSTRUCTION:
//    - createAddress, createContact, createPerson: Build nested structures with prepared references
//    - createOrganization, createProject: Complex composition with multiple nesting levels
//    - Each construction level prepares references that remain valid through all nesting
//
// 2. NESTED REFERENCE TRANSFORMATION:
//    - transformProjectTitle: Accesses nested organization data preparing enhanced results
//    - processProject: Combines transformation with metadata preparation for comprehensive results
//    - Transformations preserve all nested reference validity during processing
//
// 3. BATCH PROCESSING WITH NESTED REFERENCES:
//    - createProjectBatch, processBatchProject: Generate multiple projects with prepared references
//    - Each batch item contains full nested structure with all references prepared for caller
//    - Batch processing maintains reference validity across multiple generated items
//
// 4. NESTED DATA EXTRACTION:
//    - extractOrganizationInfo, extractContactDetails: Navigate deep structures preparing summaries
//    - analyzeProjectComplexity: Analyze nested data preparing comprehensive analysis
//    - Extraction functions prepare references that remain valid for caller use
//
// 5. COMPREHENSIVE ANALYSIS PIPELINES:
//    - processProjectComprehensively: End-to-end processing with nested reference preparation
//    - createProjectAnalysisReport: Combines multiple analysis functions preparing comprehensive reports
//    - Analysis pipelines maintain reference validity through multiple processing stages
//
// 6. MULTI-LEVEL REFERENCE CHAINS:
//    - Project → Organization → Person → Contact → Address reference chains
//    - Each level prepares references for use by any caller in the chain
//    - Deep access patterns demonstrate reference validity preservation across multiple nesting levels
//
// KEY ADVANCEMENT: Nested patterns demonstrate how reference preparation enables building
// and manipulating complex hierarchical data structures where references remain valid
// across arbitrary levels of nesting, composition, and transformation, supporting
// sophisticated data modeling patterns with guaranteed reference validity and
// zero-copy access to deeply nested components.
