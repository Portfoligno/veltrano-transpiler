// Comment Edge Cases in Expressions
// Tests various comment scenarios that might break parsing or formatting

import str.toUppercase

fun testCommentTypes() {
    // Single line comment formats
    val a = 42 // comment at end
    val b = /* inline block */ 42
    val c = 42 /* after */ // and line comment

    // Multi-line block comments
    val d = /* this is a
               multi-line
               block comment */ 42

    // Nested-looking comments (not actually nested)
    val e = /* outer /* not really nested */ 42
    val f = /* /* /* multiple starts */ 42
}

fun testCommentsInOperatorChains() {
    // Between each operator
    val a = 1 + /* c1 */ 2 * /* c2 */ 3 - /* c3 */ 4

    // Line comments forcing newlines
    val b = 1 + // plus
            2 * // times
            3 - // minus
            4

    // Mixed line and block
    val c = 1 /* block */ + // line
            2 * /* another block */
            3 // end line
}

fun testCommentsAndPrecedence() {
    // Comments shouldn't affect parsing precedence
    val a = 2 + /* higher precedence next */ 3 * 4
    val b = 2 * 3 /* lower precedence next */ + 4

    // With parentheses
    val c = (2 + 3) /* now multiply */ * 4
    val d = 2 + /* parentheses change precedence */ (3 * 4)
}

fun testAdjacentComments() {
    // Multiple comments in sequence
    val a = /* c1 */ /* c2 */ /* c3 */ 42
    val b = 42 /* c1 */ /* c2 */ /* c3 */

    // Line comments in sequence
    // TODO: Parser doesn't support line comment with newline before expression
    // val c = // comment 1
    //         // comment 2
    //         // comment 3
    //         42

    // Mixed adjacent
    // TODO: Parser doesn't support line comment at end of line in expressions
    // val d = /* block */ // line
    //         42
    // val e = // line
    //         /* block */ 42
}

fun testCommentsInFunctionCalls() {
    // Every possible position
    foo(/* before first */ 1 /* after first */, /* before second */ 2 /* after second */)

    // With newlines
    foo(
        /* before first */ 3 /* after first */,
        /* before second */ 4 /* after second */
    )

    // Line comments
    // TODO: Parser in preserve-comments mode doesn't handle line comments before arguments
    foo(
        1, // after first
        2  // after second
    )

    // Empty-looking calls
    bar()  // Normal call works
    // TODO: Parser in preserve-comments mode doesn't handle empty args with only comments
    // bar(/* just comments */)
    // bar(
    //     // just a comment
    // )
}

fun testCommentsInMethodChains() {
    val s = "hello"

    // Between chain elements
    // val a = s /* c1 */ . /* c2 */ len /* c3 */ ()  // TODO: Parser doesn't support spaces after dot

    // With line comments and newlines
    // TODO: Parser doesn't support newlines after dot operator
    // val b = s // object
    //         . // dot
    //         toUppercase // method
    //         () // call
    //         . // chain
    //         len // next method
    //         () // final call

    // Complex chain
    // TODO: Parser doesn't support comments/newlines around dot operator
    // val c = s
    //         /* block before dot */ . /* block after dot */
    //         // line comment
    //         toUppercase()
    //         /* between calls */
    //         .len()
}

fun testEdgePositions() {
    // Start of file handled separately

    // Before statement
    /* comment */ val a = 42

    // In weird places
    val b = 42 /* before semicolon (implicit) */

    // Multiple on same line
    // /* c1 */ val c /* c2 */ = /* c3 */ 42 /* c4 */ // c5  // TODO: Comment between name and =

    // Between keywords
    // val /* between val and name */ d = 42  // TODO: Comment between val and name
}

fun testCommentContent() {
    // Special characters in comments
    val a = 42 /* comment with "quotes" and 'apostrophes' */
    val b = 42 /* comment with \ backslash and / slash */
    val c = 42 /* comment with newline \n and tab \t */

    // Code-like content
    val d = 42 /* val fake = 99; this isn't real code */
    val e = 42 // } this brace doesn't close anything

    // Very long comments
    val f = 42 /* This is a very long comment that goes on and on and on and might wrap in some editors or displays but should still be handled correctly by the parser and code generator */
}

fun testWhitespaceInteraction() {
    // No space around comments
    val a = 42/* comment */+/* comment */5

    // Lots of space
    val b = 42    /*  comment  */    +    /*  comment  */    5

    // Tabs and spaces
    val c = 42	/* tab before */  /* spaces before */

    // Newlines and comments
    // TODO: Parser doesn't support line continuation with comments
    // val d = 42 /* comment */
    //         /* another comment */
    //         + 5
}

// This is a utility function for testing
fun foo(a: I64, b: I64) {
    println("{} {}", a, b)
}

// Zero-argument function for testing empty calls with comments
fun bar() {
    println("bar called")
}

fun main() {
    println("Testing comment edge cases...")
    testCommentTypes()
    testCommentsInOperatorChains()
    testCommentsAndPrecedence()
    testAdjacentComments()
    testCommentsInFunctionCalls()
    testCommentsInMethodChains()
    testEdgePositions()
    testCommentContent()
    testWhitespaceInteraction()
    println("Comment edge case tests completed!")
}
