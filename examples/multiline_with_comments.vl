// Test multiline function calls with comments

fun testFunction(a: I64, b: I64, c: I64): I64 {
    return a + b + c
}

fun main() {
    // Test 1: Comments between arguments
    val result1 = testFunction(
        1,  // first argument
        2,  // second argument
        3   // third argument
    )
    
    // Test 2: Comments on their own lines
    val result2 = testFunction(
        10,
        // This is a comment between arguments
        20,
        // Another comment
        30
    )
    
    // Test 3: Block comments in multiline calls
    val result3 = testFunction(
        100, /* first */
        200, /* second */
        300  /* third */
    )
    
    // Test 4: Comments in function parameter definitions
    fun withCommentedParams(
        x: I64,  // The x coordinate
        y: I64,  // The y coordinate
        z: I64   // The z coordinate
    ): I64 {
        return x + y + z
    }
    
    // Test 5: Extra indented standalone comments
    val result5 = testFunction(
        50,
            // This comment has 4 extra spaces
        60,
                // This comment has 8 extra spaces
        70
    )
    
    // Test 6: Comments in method chains
    val chained = result1
        .ref()      // Get reference
        .clone()    // Clone it
    
    // Test 7: Method chain that won't be optimized away
    val message: Ref<Str> = "Hello".bumpRef()
    val chained2: Ref<Ref<Ref<Ref<Str>>>> = message
        .ref()      // First ref
        .ref()      // Second ref
        .bumpRef()  // Final bumpRef
    
    // Test 8: Mixed style method chain with comments
    val mixed = message.ref()  // Start on same line
        .ref()      // Continue on next
        .bumpRef()  // And finish
    
    // Test 9: Block comments in method chains
    val blockChained = result1
        .ref()      /* Get reference (block) */
        .clone()    /* Clone it (block) */
    
    // Test 10: Mixed block and line comments in method chains
    val mixedComments = message
        .ref()      /* First block comment */
        .ref()      // Line comment in middle
        .bumpRef()  /* Final block comment */
    
    println("Results: {}, {}, {}, {}", result1, result2, result3, result5)
}
